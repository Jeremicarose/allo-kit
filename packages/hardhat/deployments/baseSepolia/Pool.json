{
  "address": "0xe53AB2916Fc26a6481d1542af976D5e987997e69",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_schema",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_metadataURI",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "Allocate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "updater",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "admins",
              "type": "address[]"
            },
            {
              "internalType": "address",
              "name": "allocationToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "distributionToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "maxAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint64[]",
              "name": "timestamps",
              "type": "uint64[]"
            },
            {
              "internalType": "string",
              "name": "metadataURI",
              "type": "string"
            }
          ],
          "indexed": false,
          "internalType": "struct PoolConfig",
          "name": "config",
          "type": "tuple"
        }
      ],
      "name": "Configure",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "schema",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "metadataURI",
          "type": "string"
        }
      ],
      "name": "Deployed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "project",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "metadataURI",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "Register",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "project",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "status",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "metadataURI",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "Review",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "project",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "updater",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "metadataURI",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "Update",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "recipients",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "allocate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "config",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "allocationToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "distributionToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maxAmount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "metadataURI",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "admins",
              "type": "address[]"
            },
            {
              "internalType": "address",
              "name": "allocationToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "distributionToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "maxAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint64[]",
              "name": "timestamps",
              "type": "uint64[]"
            },
            {
              "internalType": "string",
              "name": "metadataURI",
              "type": "string"
            }
          ],
          "internalType": "struct PoolConfig",
          "name": "_config",
          "type": "tuple"
        }
      ],
      "name": "configure",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "recipients",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "distribute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "admins",
              "type": "address[]"
            },
            {
              "internalType": "address",
              "name": "allocationToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "distributionToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "maxAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint64[]",
              "name": "timestamps",
              "type": "uint64[]"
            },
            {
              "internalType": "string",
              "name": "metadataURI",
              "type": "string"
            }
          ],
          "internalType": "struct PoolConfig",
          "name": "_config",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "project",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "metadataURI",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "register",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "registrations",
      "outputs": [
        {
          "internalType": "enum IPool.Status",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "metadataURI",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "project",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "metadataURI",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "review",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "schema",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "project",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "metadataURI",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "update",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0b0daa93f47550ddf80e3eadbd13a0f2baa4b461209bdef413dcd3d8c4bf2725",
  "receipt": {
    "to": null,
    "from": "0x8595e36857743A1C517e00179e6bA6D170DD1F51",
    "contractAddress": "0xe53AB2916Fc26a6481d1542af976D5e987997e69",
    "transactionIndex": 19,
    "gasUsed": "1621027",
    "logsBloom": "0x
    "blockHash": "0x04b6804ec711d3dccdf5dfc4179bf78105faac179f526fa57c590f9013a7248a",
    "transactionHash": "0x0b0daa93f47550ddf80e3eadbd13a0f2baa4b461209bdef413dcd3d8c4bf2725",
    "logs": [
      {
        "transactionIndex": 19,
        "blockNumber": 27281201,
        "transactionHash": "0x0b0daa93f47550ddf80e3eadbd13a0f2baa4b461209bdef413dcd3d8c4bf2725",
        "address": "0xe53AB2916Fc26a6481d1542af976D5e987997e69",
        "topics": [
          "0x72aeb8e4e073b2b6fc374bc9e1acd0b59d25c19bc96e662f34e973d1ad9ff9fc",
          "0x0000000000000000000000008595e36857743a1c517e00179e6ba6d170dd1f51"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 176,
        "blockHash": "0x04b6804ec711d3dccdf5dfc4179bf78105faac179f526fa57c590f9013a7248a"
      }
    ],
    "blockNumber": 27281201,
    "cumulativeGasUsed": "8437994",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "",
    "",
    {
      "owner": "0x8595e36857743A1C517e00179e6bA6D170DD1F51",
      "allocationToken": "0x0000000000000000000000000000000000000000",
      "distributionToken": "0x0000000000000000000000000000000000000000",
      "maxAmount": "0",
      "metadataURI": "",
      "admins": [],
      "timestamps": []
    }
  ],
  "numDeployments": 4,
  "solcInputHash": "8fddd60c5a8ff19636d8b1181be705ca",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_schema\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_metadataURI\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Allocate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"updater\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"admins\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"allocationToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"distributionToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint64[]\",\"name\":\"timestamps\",\"type\":\"uint64[]\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"}],\"indexed\":false,\"internalType\":\"struct PoolConfig\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"Configure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"schema\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"}],\"name\":\"Deployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"project\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Register\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"project\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Review\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"project\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"updater\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Update\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"allocate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"allocationToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"distributionToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"admins\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"allocationToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"distributionToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint64[]\",\"name\":\"timestamps\",\"type\":\"uint64[]\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"}],\"internalType\":\"struct PoolConfig\",\"name\":\"_config\",\"type\":\"tuple\"}],\"name\":\"configure\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"admins\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"allocationToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"distributionToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint64[]\",\"name\":\"timestamps\",\"type\":\"uint64[]\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"}],\"internalType\":\"struct PoolConfig\",\"name\":\"_config\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"project\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"registrations\",\"outputs\":[{\"internalType\":\"enum IPool.Status\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"project\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"review\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"schema\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"project\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_metadataURI\":\"Metadata URI of the Pool (title, description, etc.)\",\"_name\":\"Name of the Pool Strategy\",\"_schema\":\"Schema of the Pool (uint256 param, string anotherParam) - can be used for passing custom data\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Pool.sol\":\"Pool\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"contracts/Pool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nstruct PoolConfig {\\n    address owner;\\n    address[] admins;\\n    address allocationToken;\\n    address distributionToken;\\n    uint256 maxAmount;\\n    uint64[] timestamps;\\n    string metadataURI;\\n}\\n\\ninterface IPool {\\n    enum Status {\\n        pending,\\n        approved,\\n        rejected\\n    }\\n\\n    struct Registration {\\n        Status status;\\n        address owner;\\n        string metadataURI;\\n        bytes data; // Data can contain information that can be accessed later\\n    }\\n\\n    function schema() external view returns (string memory);\\n\\n    event Deployed(string name, address indexed owner, string schema, string metadataURI);\\n    event Allocate(address indexed from, address indexed to, uint256 amount, address token, bytes data);\\n    event Register(address indexed project, address indexed owner, string metadataURI, bytes data);\\n    event Review(address indexed project, uint8 status, address indexed approver, string metadataURI, bytes data);\\n    event Update(address indexed project, address indexed updater, string metadataURI, bytes data);\\n    event Configure(address indexed updater, PoolConfig config);\\n\\n    function initialize(PoolConfig memory config, bytes memory data) external;\\n    function configure(PoolConfig memory config) external;\\n    function register(address project, string memory metadataURI, bytes memory data) external;\\n    function update(address project, string memory metadataURI, bytes memory data) external;\\n    function review(address project, uint8 status, string memory metadataURI, bytes memory data) external;\\n    function allocate(address[] memory recipients, uint256[] memory amounts, address token, bytes[] memory data)\\n        external;\\n    function distribute(address[] memory recipients, uint256[] memory amounts, address token, bytes[] memory data)\\n        external;\\n}\\n\\n/*\\nTypes of Pools:\\nDirectGrants - pool manager transfer funds directly to projects\\nRetroFunding - selected voters vote on projects and pool gets distributed based on the votes\\nQuadraticFunding - people vote with money tokens and get matching funds from the pool based on quadratic formula\\nDedicatedDomainAllocation - selected panel of domain experts decide what projects receive matching funds\\nRFPs\\nBounties\\nCrowdfunding\\n*/\\ncontract Pool is IPool {\\n    bool private _initialized;\\n    PoolConfig public config;\\n    string public schema;\\n\\n    mapping(address => Registration) public registrations;\\n\\n    /**\\n     * @param _name Name of the Pool Strategy\\n     * @param _schema Schema of the Pool (uint256 param, string anotherParam) - can be used for passing custom data\\n     * @param _metadataURI Metadata URI of the Pool (title, description, etc.)\\n     */\\n    constructor(string memory _name, string memory _schema, string memory _metadataURI) {\\n        // Emit an event for the Indexer so Pools can be created with this Strategy\\n        emit Deployed(_name, msg.sender, _schema, _metadataURI);\\n        schema = _schema;\\n    }\\n\\n    function initialize(PoolConfig memory _config, bytes memory data) public virtual {\\n        require(!_initialized, \\\"Already initialized\\\");\\n        _initialized = true;\\n        config = _config;\\n    }\\n\\n    function _configure(PoolConfig memory _config) internal virtual {\\n        // Logic for updating the Pool handled in calling contract\\n        config = _config;\\n        emit Configure(msg.sender, _config);\\n    }\\n\\n    // MetadataURI contain details about project application\\n    function _register(address project, string memory _metadataURI, bytes memory data) internal {\\n        require(registrations[project].owner == address(0), \\\"Already registered\\\");\\n        registrations[project] = Registration(Status.pending, msg.sender, _metadataURI, data);\\n        emit Register(project, msg.sender, _metadataURI, data);\\n    }\\n\\n    function _review(address project, uint8 status, string memory _metadataURI, bytes memory data) internal {\\n        Registration storage registration = registrations[project];\\n        registration.status = Status(status);\\n        // MetadataURI can contain information about review, or potential rejection reason\\n        emit Review(project, status, msg.sender, _metadataURI, data);\\n    }\\n\\n    function _update(address project, string memory _metadataURI, bytes memory data) internal {\\n        require(registrations[project].owner == msg.sender, \\\"Must be owner to update\\\");\\n        require(registrations[project].status != Status.approved, \\\"Already approved\\\");\\n        registrations[project].metadataURI = _metadataURI;\\n        registrations[project].data = data;\\n        emit Update(project, msg.sender, _metadataURI, data);\\n    }\\n\\n    // Allocate tokens to recipients (transfers tokens from caller to recipients)\\n    // This can be used to transfer tokens to projects, or the contract itself to fund with matching funds for example\\n    function _allocate(address[] memory recipients, uint256[] memory amounts, address token, bytes[] memory data)\\n        internal\\n    {\\n        uint256 length = recipients.length;\\n        require(length > 0 && length == amounts.length, \\\"Mismatched lengths\\\");\\n\\n        for (uint256 i = 0; i < length; i++) {\\n            bytes memory _data = i < data.length ? data[i] : bytes(\\\"\\\");\\n            require(recipients[i] != address(0), \\\"Recipient is zero address\\\");\\n            require(amounts[i] > 0, \\\"Amount is zero\\\");\\n            _beforeAllocate(recipients[i], amounts[i], token, _data);\\n            IERC20(token).transferFrom(msg.sender, recipients[i], amounts[i]);\\n            emit Allocate(msg.sender, recipients[i], amounts[i], token, _data);\\n        }\\n    }\\n\\n    // Distribute tokens to recipients (transfers tokens from the contract to recipients)\\n    // Can be used to distribute matching funds to projects\\n    function _distribute(address[] memory recipients, uint256[] memory amounts, address token, bytes[] memory data)\\n        internal\\n    {\\n        uint256 length = recipients.length;\\n        require(length > 0 && length == amounts.length, \\\"Mismatched lengths\\\");\\n\\n        for (uint256 i = 0; i < length; i++) {\\n            bytes memory _data = i < data.length ? data[i] : bytes(\\\"\\\");\\n            require(recipients[i] != address(0), \\\"Recipient is zero address\\\");\\n            require(\\n                amounts[i] > 0 && amounts[i] <= IERC20(token).balanceOf(address(this)),\\n                \\\"Amount is zero or exceeds balance\\\"\\n            );\\n            _beforeDistribute(recipients[i], amounts[i], token, _data);\\n            IERC20(token).transfer(recipients[i], amounts[i]);\\n            emit Allocate(address(this), recipients[i], amounts[i], token, _data);\\n        }\\n    }\\n\\n    function _beforeAllocate(address recipient, uint256 amount, address token, bytes memory data) internal virtual {}\\n    function _beforeDistribute(address recipient, uint256 amount, address token, bytes memory data) internal virtual {}\\n\\n    function configure(PoolConfig memory _config) external virtual override {\\n        _configure(_config);\\n    }\\n\\n    function register(address project, string memory metadataURI, bytes memory data) external virtual override {\\n        _register(project, metadataURI, data);\\n    }\\n\\n    function update(address project, string memory metadataURI, bytes memory data) external virtual override {\\n        _update(project, metadataURI, data);\\n    }\\n\\n    function review(address project, uint8 status, string memory metadataURI, bytes memory data)\\n        external\\n        virtual\\n        override\\n    {\\n        _review(project, status, metadataURI, data);\\n    }\\n\\n    function allocate(address[] memory recipients, uint256[] memory amounts, address token, bytes[] memory data)\\n        external\\n        virtual\\n        override\\n    {\\n        _allocate(recipients, amounts, token, data);\\n    }\\n\\n    function distribute(address[] memory recipients, uint256[] memory amounts, address token, bytes[] memory data)\\n        external\\n        virtual\\n        override\\n    {\\n        _distribute(recipients, amounts, token, data);\\n    }\\n}\\n\",\"keccak256\":\"0x0348f7049924879acbd7ab3e41ad42cc0e63d655b50bdd13f07e6259a3ab2309\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001fbd38038062001fbd833981016040819052620000349162000160565b336001600160a01b03167f72aeb8e4e073b2b6fc374bc9e1acd0b59d25c19bc96e662f34e973d1ad9ff9fc84848460405162000073939291906200021f565b60405180910390a26008620000898382620002ed565b50505050620003b9565b634e487b7160e01b600052604160045260246000fd5b60005b83811015620000c6578181015183820152602001620000ac565b50506000910152565b600082601f830112620000e157600080fd5b81516001600160401b0380821115620000fe57620000fe62000093565b604051601f8301601f19908116603f0116810190828211818310171562000129576200012962000093565b816040528381528660208588010111156200014357600080fd5b62000156846020830160208901620000a9565b9695505050505050565b6000806000606084860312156200017657600080fd5b83516001600160401b03808211156200018e57600080fd5b6200019c87838801620000cf565b94506020860151915080821115620001b357600080fd5b620001c187838801620000cf565b93506040860151915080821115620001d857600080fd5b50620001e786828701620000cf565b9150509250925092565b600081518084526200020b816020860160208601620000a9565b601f01601f19169290920160200192915050565b606081526000620002346060830186620001f1565b8281036020840152620002488186620001f1565b90508281036040840152620001568185620001f1565b600181811c908216806200027357607f821691505b6020821081036200029457634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620002e857600081815260208120601f850160051c81016020861015620002c35750805b601f850160051c820191505b81811015620002e457828155600101620002cf565b5050505b505050565b81516001600160401b0381111562000309576200030962000093565b62000321816200031a84546200025e565b846200029a565b602080601f831160018114620003595760008415620003405750858301515b600019600386901b1c1916600185901b178555620002e4565b600085815260208120601f198616915b828110156200038a5788860151825594840194600190910190840162000369565b5085821015620003a95787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b611bf480620003c96000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c806394a689251161006657806394a6892514610123578063ab21f50714610136578063c922da5414610149578063eede8aea1461015c578063f8895cc81461016f57600080fd5b806358086775146100a3578063747ffca2146100b857806379502c55146100cb578063906b89c6146100ed578063942e6bcf14610100575b600080fd5b6100b66100b136600461125b565b610184565b005b6100b66100c63660046113e2565b610194565b6100d36101a6565b6040516100e4959493929190611515565b60405180910390f35b6100b66100fb36600461155b565b610259565b61011361010e3660046115db565b610265565b6040516100e49493929190611613565b6100b66101313660046117ad565b6103ac565b6100b66101443660046117e9565b6103b8565b6100b661015736600461125b565b6104c9565b6100b661016a3660046113e2565b6104d4565b6101776104e0565b6040516100e4919061184c565b61018f83838361056e565b505050565b6101a0848484846106d2565b50505050565b60018054600354600454600554600780546001600160a01b0395861696948616959093169391926101d69061185f565b80601f01602080910402602001604051908101604052809291908181526020018280546102029061185f565b801561024f5780601f106102245761010080835404028352916020019161024f565b820191906000526020600020905b81548152906001019060200180831161023257829003601f168201915b5050505050905085565b6101a084848484610a64565b6009602052600090815260409020805460018201805460ff8316936101009093046001600160a01b031692919061029b9061185f565b80601f01602080910402602001604051908101604052809291908181526020018280546102c79061185f565b80156103145780601f106102e957610100808354040283529160200191610314565b820191906000526020600020905b8154815290600101906020018083116102f757829003601f168201915b5050505050908060020180546103299061185f565b80601f01602080910402602001604051908101604052809291908181526020018280546103559061185f565b80156103a25780601f10610377576101008083540402835291602001916103a2565b820191906000526020600020905b81548152906001019060200180831161038557829003601f168201915b5050505050905084565b6103b581610b08565b50565b60005460ff16156104065760405162461bcd60e51b8152602060048201526013602482015272105b1c9958591e481a5b9a5d1a585b1a5e9959606a1b60448201526064015b60405180910390fd5b60008054600160ff199091168117909155825181546001600160a01b0319166001600160a01b03909116178155602080840151805185939261044d92600292910190611039565b5060408201516002820180546001600160a01b039283166001600160a01b03199182161790915560608401516003840180549190931691161790556080820151600482015560a082015180516104ad91600584019160209091019061109e565b5060c082015160068201906104c290826118df565b5050505050565b61018f838383610bf8565b6101a084848484610d66565b600880546104ed9061185f565b80601f01602080910402602001604051908101604052809291908181526020018280546105199061185f565b80156105665780601f1061053b57610100808354040283529160200191610566565b820191906000526020600020905b81548152906001019060200180831161054957829003601f168201915b505050505081565b6001600160a01b03838116600090815260096020526040902054610100900416156105d05760405162461bcd60e51b8152602060048201526012602482015271105b1c9958591e481c9959da5cdd195c995960721b60448201526064016103fd565b60408051608081018252600080825233602080840191909152828401869052606083018590526001600160a01b0387168252600990529190912081518154829060ff19166001836002811115610628576106286115fd565b0217905550602082015181546001600160a01b0390911661010002610100600160a81b03199091161781556040820151600182019061066790826118df565b506060820151600282019061067c90826118df565b50905050336001600160a01b0316836001600160a01b03167f99202cc5abf24650e7ac53e3a81ff614768dcc7569a245376ed82eb4ce243fca84846040516106c592919061199e565b60405180910390a3505050565b835180158015906106e35750835181145b6107245760405162461bcd60e51b81526020600482015260126024820152714d69736d617463686564206c656e6774687360701b60448201526064016103fd565b60005b81811015610a5c5760008351821061074e5760405180602001604052806000815250610769565b838281518110610760576107606119cc565b60200260200101515b905060006001600160a01b0316878381518110610788576107886119cc565b60200260200101516001600160a01b0316036107e25760405162461bcd60e51b8152602060048201526019602482015278526563697069656e74206973207a65726f206164647265737360381b60448201526064016103fd565b60008683815181106107f6576107f66119cc565b602002602001015111801561088b57506040516370a0823160e01b81523060048201526001600160a01b038616906370a0823190602401602060405180830381865afa15801561084a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061086e91906119e2565b868381518110610880576108806119cc565b602002602001015111155b6108e15760405162461bcd60e51b815260206004820152602160248201527f416d6f756e74206973207a65726f206f7220657863656564732062616c616e636044820152606560f81b60648201526084016103fd565b6109108783815181106108f6576108f66119cc565b602002602001015187848151811061018f5761018f6119cc565b846001600160a01b031663a9059cbb888481518110610931576109316119cc565b602002602001015188858151811061094b5761094b6119cc565b60200260200101516040518363ffffffff1660e01b81526004016109849291906001600160a01b03929092168252602082015260400190565b6020604051808303816000875af11580156109a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c791906119fb565b508682815181106109da576109da6119cc565b60200260200101516001600160a01b0316306001600160a01b03167f68179208818f375bd941a067e321c35e8cebc048007cd126acd94625989a7b75888581518110610a2857610a286119cc565b60200260200101518885604051610a4193929190611a1d565b60405180910390a35080610a5481611a47565b915050610727565b505050505050565b6001600160a01b038416600090815260096020526040902060ff84166002811115610a9157610a916115fd565b8154829060ff19166001836002811115610aad57610aad6115fd565b0217905550336001600160a01b0316856001600160a01b03167f76dfcb7079d175d526d40b126e4a1cc466c3855e25ba5b37c3168609060e1d78868686604051610af993929190611a6e565b60405180910390a35050505050565b8051600180546001600160a01b0319166001600160a01b039092169190911781556020808301518051849392610b4392600292910190611039565b5060408201516002820180546001600160a01b039283166001600160a01b03199182161790915560608401516003840180549190931691161790556080820151600482015560a08201518051610ba391600584019160209091019061109e565b5060c08201516006820190610bb890826118df565b50506040513391507f7262fa021611ce5fba1be5b0e369cd9209c8d8408b2f67329285403f6d5a048d90610bed908490611aea565b60405180910390a250565b6001600160a01b038381166000908152600960205260409020546101009004163314610c665760405162461bcd60e51b815260206004820152601760248201527f4d757374206265206f776e657220746f2075706461746500000000000000000060448201526064016103fd565b60016001600160a01b03841660009081526009602052604090205460ff166002811115610c9557610c956115fd565b03610cd55760405162461bcd60e51b815260206004820152601060248201526f105b1c9958591e48185c1c1c9bdd995960821b60448201526064016103fd565b6001600160a01b0383166000908152600960205260409020600101610cfa83826118df565b506001600160a01b0383166000908152600960205260409020600201610d2082826118df565b50336001600160a01b0316836001600160a01b03167f639b764af06689bf35c6ebc1ae49051aa4b4d3a3d34d5c70bf8626087352e99d84846040516106c592919061199e565b83518015801590610d775750835181145b610db85760405162461bcd60e51b81526020600482015260126024820152714d69736d617463686564206c656e6774687360701b60448201526064016103fd565b60005b81811015610a5c57600083518210610de25760405180602001604052806000815250610dfd565b838281518110610df457610df46119cc565b60200260200101515b905060006001600160a01b0316878381518110610e1c57610e1c6119cc565b60200260200101516001600160a01b031603610e765760405162461bcd60e51b8152602060048201526019602482015278526563697069656e74206973207a65726f206164647265737360381b60448201526064016103fd565b6000868381518110610e8a57610e8a6119cc565b602002602001015111610ed05760405162461bcd60e51b815260206004820152600e60248201526d416d6f756e74206973207a65726f60901b60448201526064016103fd565b610ee58783815181106108f6576108f66119cc565b846001600160a01b03166323b872dd33898581518110610f0757610f076119cc565b6020026020010151898681518110610f2157610f216119cc565b60209081029190910101516040516001600160e01b031960e086901b1681526001600160a01b03938416600482015292909116602483015260448201526064016020604051808303816000875af1158015610f80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa491906119fb565b50868281518110610fb757610fb76119cc565b60200260200101516001600160a01b0316336001600160a01b03167f68179208818f375bd941a067e321c35e8cebc048007cd126acd94625989a7b75888581518110611005576110056119cc565b6020026020010151888560405161101e93929190611a1d565b60405180910390a3508061103181611a47565b915050610dbb565b82805482825590600052602060002090810192821561108e579160200282015b8281111561108e57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190611059565b5061109a92915061114d565b5090565b8280548282559060005260206000209060030160049004810192821561108e5791602002820160005b8382111561111157835183826101000a8154816001600160401b0302191690836001600160401b0316021790555092602001926008016020816007010492830192600103026110c7565b80156111445782816101000a8154906001600160401b030219169055600801602081600701049283019260010302611111565b505061109a9291505b5b8082111561109a576000815560010161114e565b80356001600160a01b038116811461117957600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60405160e081016001600160401b03811182821017156111b6576111b661117e565b60405290565b604051601f8201601f191681016001600160401b03811182821017156111e4576111e461117e565b604052919050565b600082601f8301126111fd57600080fd5b81356001600160401b038111156112165761121661117e565b611229601f8201601f19166020016111bc565b81815284602083860101111561123e57600080fd5b816020850160208301376000918101602001919091529392505050565b60008060006060848603121561127057600080fd5b61127984611162565b925060208401356001600160401b038082111561129557600080fd5b6112a1878388016111ec565b935060408601359150808211156112b757600080fd5b506112c4868287016111ec565b9150509250925092565b60006001600160401b038211156112e7576112e761117e565b5060051b60200190565b600082601f83011261130257600080fd5b81356020611317611312836112ce565b6111bc565b82815260059290921b8401810191818101908684111561133657600080fd5b8286015b848110156113585761134b81611162565b835291830191830161133a565b509695505050505050565b600082601f83011261137457600080fd5b81356020611384611312836112ce565b82815260059290921b840181019181810190868411156113a357600080fd5b8286015b848110156113585780356001600160401b038111156113c65760008081fd5b6113d48986838b01016111ec565b8452509183019183016113a7565b600080600080608085870312156113f857600080fd5b84356001600160401b038082111561140f57600080fd5b61141b888389016112f1565b955060209150818701358181111561143257600080fd5b8701601f8101891361144357600080fd5b8035611451611312826112ce565b81815260059190911b8201840190848101908b83111561147057600080fd5b928501925b8284101561148e57833582529285019290850190611475565b97506114a09250505060408801611162565b935060608701359150808211156114b657600080fd5b506114c387828801611363565b91505092959194509250565b6000815180845260005b818110156114f5576020818501810151868301820152016114d9565b506000602082860101526020601f19601f83011685010191505092915050565b6001600160a01b0386811682528581166020830152841660408201526060810183905260a060808201819052600090611550908301846114cf565b979650505050505050565b6000806000806080858703121561157157600080fd5b61157a85611162565b9350602085013560ff8116811461159057600080fd5b925060408501356001600160401b03808211156115ac57600080fd5b6115b8888389016111ec565b935060608701359150808211156115ce57600080fd5b506114c3878288016111ec565b6000602082840312156115ed57600080fd5b6115f682611162565b9392505050565b634e487b7160e01b600052602160045260246000fd5b60006003861061163357634e487b7160e01b600052602160045260246000fd5b8582526001600160a01b038516602083015260806040830181905261165a908301856114cf565b828103606084015261155081856114cf565b600082601f83011261167d57600080fd5b8135602061168d611312836112ce565b82815260059290921b840181019181810190868411156116ac57600080fd5b8286015b848110156113585780356001600160401b03811681146116d05760008081fd5b83529183019183016116b0565b600060e082840312156116ef57600080fd5b6116f7611194565b905061170282611162565b815260208201356001600160401b038082111561171e57600080fd5b61172a858386016112f1565b602084015261173b60408501611162565b604084015261174c60608501611162565b60608401526080840135608084015260a084013591508082111561176f57600080fd5b61177b8583860161166c565b60a084015260c084013591508082111561179457600080fd5b506117a1848285016111ec565b60c08301525092915050565b6000602082840312156117bf57600080fd5b81356001600160401b038111156117d557600080fd5b6117e1848285016116dd565b949350505050565b600080604083850312156117fc57600080fd5b82356001600160401b038082111561181357600080fd5b61181f868387016116dd565b9350602085013591508082111561183557600080fd5b50611842858286016111ec565b9150509250929050565b6020815260006115f660208301846114cf565b600181811c9082168061187357607f821691505b60208210810361189357634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561018f57600081815260208120601f850160051c810160208610156118c05750805b601f850160051c820191505b81811015610a5c578281556001016118cc565b81516001600160401b038111156118f8576118f861117e565b61190c81611906845461185f565b84611899565b602080601f83116001811461194157600084156119295750858301515b600019600386901b1c1916600185901b178555610a5c565b600085815260208120601f198616915b8281101561197057888601518255948401946001909101908401611951565b508582101561198e5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6040815260006119b160408301856114cf565b82810360208401526119c381856114cf565b95945050505050565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156119f457600080fd5b5051919050565b600060208284031215611a0d57600080fd5b815180151581146115f657600080fd5b8381526001600160a01b03831660208201526060604082018190526000906119c3908301846114cf565b600060018201611a6757634e487b7160e01b600052601160045260246000fd5b5060010190565b60ff84168152606060208201526000611a8a60608301856114cf565b8281036040840152611a9c81856114cf565b9695505050505050565b600081518084526020808501945080840160005b83811015611adf5781516001600160401b031687529582019590820190600101611aba565b509495945050505050565b602080825282516001600160a01b03908116838301528382015160e060408501528051610100850181905260009392918301919084906101208701905b80831015611b4957845184168252938501936001929092019190850190611b27565b5060408801516001600160a01b0381166060890152945060608801516001600160a01b03811660808901529450608088015160a088015260a08801519450601f199350838782030160c0880152611ba08186611aa6565b945050505060c0850151818584030160e0860152611a9c83826114cf56fea26469706673582212203a963047f26911068b6c6a01d01999b433d617362fa33a26ca213e83a840498664736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c806394a689251161006657806394a6892514610123578063ab21f50714610136578063c922da5414610149578063eede8aea1461015c578063f8895cc81461016f57600080fd5b806358086775146100a3578063747ffca2146100b857806379502c55146100cb578063906b89c6146100ed578063942e6bcf14610100575b600080fd5b6100b66100b136600461125b565b610184565b005b6100b66100c63660046113e2565b610194565b6100d36101a6565b6040516100e4959493929190611515565b60405180910390f35b6100b66100fb36600461155b565b610259565b61011361010e3660046115db565b610265565b6040516100e49493929190611613565b6100b66101313660046117ad565b6103ac565b6100b66101443660046117e9565b6103b8565b6100b661015736600461125b565b6104c9565b6100b661016a3660046113e2565b6104d4565b6101776104e0565b6040516100e4919061184c565b61018f83838361056e565b505050565b6101a0848484846106d2565b50505050565b60018054600354600454600554600780546001600160a01b0395861696948616959093169391926101d69061185f565b80601f01602080910402602001604051908101604052809291908181526020018280546102029061185f565b801561024f5780601f106102245761010080835404028352916020019161024f565b820191906000526020600020905b81548152906001019060200180831161023257829003601f168201915b5050505050905085565b6101a084848484610a64565b6009602052600090815260409020805460018201805460ff8316936101009093046001600160a01b031692919061029b9061185f565b80601f01602080910402602001604051908101604052809291908181526020018280546102c79061185f565b80156103145780601f106102e957610100808354040283529160200191610314565b820191906000526020600020905b8154815290600101906020018083116102f757829003601f168201915b5050505050908060020180546103299061185f565b80601f01602080910402602001604051908101604052809291908181526020018280546103559061185f565b80156103a25780601f10610377576101008083540402835291602001916103a2565b820191906000526020600020905b81548152906001019060200180831161038557829003601f168201915b5050505050905084565b6103b581610b08565b50565b60005460ff16156104065760405162461bcd60e51b8152602060048201526013602482015272105b1c9958591e481a5b9a5d1a585b1a5e9959606a1b60448201526064015b60405180910390fd5b60008054600160ff199091168117909155825181546001600160a01b0319166001600160a01b03909116178155602080840151805185939261044d92600292910190611039565b5060408201516002820180546001600160a01b039283166001600160a01b03199182161790915560608401516003840180549190931691161790556080820151600482015560a082015180516104ad91600584019160209091019061109e565b5060c082015160068201906104c290826118df565b5050505050565b61018f838383610bf8565b6101a084848484610d66565b600880546104ed9061185f565b80601f01602080910402602001604051908101604052809291908181526020018280546105199061185f565b80156105665780601f1061053b57610100808354040283529160200191610566565b820191906000526020600020905b81548152906001019060200180831161054957829003601f168201915b505050505081565b6001600160a01b03838116600090815260096020526040902054610100900416156105d05760405162461bcd60e51b8152602060048201526012602482015271105b1c9958591e481c9959da5cdd195c995960721b60448201526064016103fd565b60408051608081018252600080825233602080840191909152828401869052606083018590526001600160a01b0387168252600990529190912081518154829060ff19166001836002811115610628576106286115fd565b0217905550602082015181546001600160a01b0390911661010002610100600160a81b03199091161781556040820151600182019061066790826118df565b506060820151600282019061067c90826118df565b50905050336001600160a01b0316836001600160a01b03167f99202cc5abf24650e7ac53e3a81ff614768dcc7569a245376ed82eb4ce243fca84846040516106c592919061199e565b60405180910390a3505050565b835180158015906106e35750835181145b6107245760405162461bcd60e51b81526020600482015260126024820152714d69736d617463686564206c656e6774687360701b60448201526064016103fd565b60005b81811015610a5c5760008351821061074e5760405180602001604052806000815250610769565b838281518110610760576107606119cc565b60200260200101515b905060006001600160a01b0316878381518110610788576107886119cc565b60200260200101516001600160a01b0316036107e25760405162461bcd60e51b8152602060048201526019602482015278526563697069656e74206973207a65726f206164647265737360381b60448201526064016103fd565b60008683815181106107f6576107f66119cc565b602002602001015111801561088b57506040516370a0823160e01b81523060048201526001600160a01b038616906370a0823190602401602060405180830381865afa15801561084a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061086e91906119e2565b868381518110610880576108806119cc565b602002602001015111155b6108e15760405162461bcd60e51b815260206004820152602160248201527f416d6f756e74206973207a65726f206f7220657863656564732062616c616e636044820152606560f81b60648201526084016103fd565b6109108783815181106108f6576108f66119cc565b602002602001015187848151811061018f5761018f6119cc565b846001600160a01b031663a9059cbb888481518110610931576109316119cc565b602002602001015188858151811061094b5761094b6119cc565b60200260200101516040518363ffffffff1660e01b81526004016109849291906001600160a01b03929092168252602082015260400190565b6020604051808303816000875af11580156109a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c791906119fb565b508682815181106109da576109da6119cc565b60200260200101516001600160a01b0316306001600160a01b03167f68179208818f375bd941a067e321c35e8cebc048007cd126acd94625989a7b75888581518110610a2857610a286119cc565b60200260200101518885604051610a4193929190611a1d565b60405180910390a35080610a5481611a47565b915050610727565b505050505050565b6001600160a01b038416600090815260096020526040902060ff84166002811115610a9157610a916115fd565b8154829060ff19166001836002811115610aad57610aad6115fd565b0217905550336001600160a01b0316856001600160a01b03167f76dfcb7079d175d526d40b126e4a1cc466c3855e25ba5b37c3168609060e1d78868686604051610af993929190611a6e565b60405180910390a35050505050565b8051600180546001600160a01b0319166001600160a01b039092169190911781556020808301518051849392610b4392600292910190611039565b5060408201516002820180546001600160a01b039283166001600160a01b03199182161790915560608401516003840180549190931691161790556080820151600482015560a08201518051610ba391600584019160209091019061109e565b5060c08201516006820190610bb890826118df565b50506040513391507f7262fa021611ce5fba1be5b0e369cd9209c8d8408b2f67329285403f6d5a048d90610bed908490611aea565b60405180910390a250565b6001600160a01b038381166000908152600960205260409020546101009004163314610c665760405162461bcd60e51b815260206004820152601760248201527f4d757374206265206f776e657220746f2075706461746500000000000000000060448201526064016103fd565b60016001600160a01b03841660009081526009602052604090205460ff166002811115610c9557610c956115fd565b03610cd55760405162461bcd60e51b815260206004820152601060248201526f105b1c9958591e48185c1c1c9bdd995960821b60448201526064016103fd565b6001600160a01b0383166000908152600960205260409020600101610cfa83826118df565b506001600160a01b0383166000908152600960205260409020600201610d2082826118df565b50336001600160a01b0316836001600160a01b03167f639b764af06689bf35c6ebc1ae49051aa4b4d3a3d34d5c70bf8626087352e99d84846040516106c592919061199e565b83518015801590610d775750835181145b610db85760405162461bcd60e51b81526020600482015260126024820152714d69736d617463686564206c656e6774687360701b60448201526064016103fd565b60005b81811015610a5c57600083518210610de25760405180602001604052806000815250610dfd565b838281518110610df457610df46119cc565b60200260200101515b905060006001600160a01b0316878381518110610e1c57610e1c6119cc565b60200260200101516001600160a01b031603610e765760405162461bcd60e51b8152602060048201526019602482015278526563697069656e74206973207a65726f206164647265737360381b60448201526064016103fd565b6000868381518110610e8a57610e8a6119cc565b602002602001015111610ed05760405162461bcd60e51b815260206004820152600e60248201526d416d6f756e74206973207a65726f60901b60448201526064016103fd565b610ee58783815181106108f6576108f66119cc565b846001600160a01b03166323b872dd33898581518110610f0757610f076119cc565b6020026020010151898681518110610f2157610f216119cc565b60209081029190910101516040516001600160e01b031960e086901b1681526001600160a01b03938416600482015292909116602483015260448201526064016020604051808303816000875af1158015610f80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa491906119fb565b50868281518110610fb757610fb76119cc565b60200260200101516001600160a01b0316336001600160a01b03167f68179208818f375bd941a067e321c35e8cebc048007cd126acd94625989a7b75888581518110611005576110056119cc565b6020026020010151888560405161101e93929190611a1d565b60405180910390a3508061103181611a47565b915050610dbb565b82805482825590600052602060002090810192821561108e579160200282015b8281111561108e57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190611059565b5061109a92915061114d565b5090565b8280548282559060005260206000209060030160049004810192821561108e5791602002820160005b8382111561111157835183826101000a8154816001600160401b0302191690836001600160401b0316021790555092602001926008016020816007010492830192600103026110c7565b80156111445782816101000a8154906001600160401b030219169055600801602081600701049283019260010302611111565b505061109a9291505b5b8082111561109a576000815560010161114e565b80356001600160a01b038116811461117957600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60405160e081016001600160401b03811182821017156111b6576111b661117e565b60405290565b604051601f8201601f191681016001600160401b03811182821017156111e4576111e461117e565b604052919050565b600082601f8301126111fd57600080fd5b81356001600160401b038111156112165761121661117e565b611229601f8201601f19166020016111bc565b81815284602083860101111561123e57600080fd5b816020850160208301376000918101602001919091529392505050565b60008060006060848603121561127057600080fd5b61127984611162565b925060208401356001600160401b038082111561129557600080fd5b6112a1878388016111ec565b935060408601359150808211156112b757600080fd5b506112c4868287016111ec565b9150509250925092565b60006001600160401b038211156112e7576112e761117e565b5060051b60200190565b600082601f83011261130257600080fd5b81356020611317611312836112ce565b6111bc565b82815260059290921b8401810191818101908684111561133657600080fd5b8286015b848110156113585761134b81611162565b835291830191830161133a565b509695505050505050565b600082601f83011261137457600080fd5b81356020611384611312836112ce565b82815260059290921b840181019181810190868411156113a357600080fd5b8286015b848110156113585780356001600160401b038111156113c65760008081fd5b6113d48986838b01016111ec565b8452509183019183016113a7565b600080600080608085870312156113f857600080fd5b84356001600160401b038082111561140f57600080fd5b61141b888389016112f1565b955060209150818701358181111561143257600080fd5b8701601f8101891361144357600080fd5b8035611451611312826112ce565b81815260059190911b8201840190848101908b83111561147057600080fd5b928501925b8284101561148e57833582529285019290850190611475565b97506114a09250505060408801611162565b935060608701359150808211156114b657600080fd5b506114c387828801611363565b91505092959194509250565b6000815180845260005b818110156114f5576020818501810151868301820152016114d9565b506000602082860101526020601f19601f83011685010191505092915050565b6001600160a01b0386811682528581166020830152841660408201526060810183905260a060808201819052600090611550908301846114cf565b979650505050505050565b6000806000806080858703121561157157600080fd5b61157a85611162565b9350602085013560ff8116811461159057600080fd5b925060408501356001600160401b03808211156115ac57600080fd5b6115b8888389016111ec565b935060608701359150808211156115ce57600080fd5b506114c3878288016111ec565b6000602082840312156115ed57600080fd5b6115f682611162565b9392505050565b634e487b7160e01b600052602160045260246000fd5b60006003861061163357634e487b7160e01b600052602160045260246000fd5b8582526001600160a01b038516602083015260806040830181905261165a908301856114cf565b828103606084015261155081856114cf565b600082601f83011261167d57600080fd5b8135602061168d611312836112ce565b82815260059290921b840181019181810190868411156116ac57600080fd5b8286015b848110156113585780356001600160401b03811681146116d05760008081fd5b83529183019183016116b0565b600060e082840312156116ef57600080fd5b6116f7611194565b905061170282611162565b815260208201356001600160401b038082111561171e57600080fd5b61172a858386016112f1565b602084015261173b60408501611162565b604084015261174c60608501611162565b60608401526080840135608084015260a084013591508082111561176f57600080fd5b61177b8583860161166c565b60a084015260c084013591508082111561179457600080fd5b506117a1848285016111ec565b60c08301525092915050565b6000602082840312156117bf57600080fd5b81356001600160401b038111156117d557600080fd5b6117e1848285016116dd565b949350505050565b600080604083850312156117fc57600080fd5b82356001600160401b038082111561181357600080fd5b61181f868387016116dd565b9350602085013591508082111561183557600080fd5b50611842858286016111ec565b9150509250929050565b6020815260006115f660208301846114cf565b600181811c9082168061187357607f821691505b60208210810361189357634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561018f57600081815260208120601f850160051c810160208610156118c05750805b601f850160051c820191505b81811015610a5c578281556001016118cc565b81516001600160401b038111156118f8576118f861117e565b61190c81611906845461185f565b84611899565b602080601f83116001811461194157600084156119295750858301515b600019600386901b1c1916600185901b178555610a5c565b600085815260208120601f198616915b8281101561197057888601518255948401946001909101908401611951565b508582101561198e5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6040815260006119b160408301856114cf565b82810360208401526119c381856114cf565b95945050505050565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156119f457600080fd5b5051919050565b600060208284031215611a0d57600080fd5b815180151581146115f657600080fd5b8381526001600160a01b03831660208201526060604082018190526000906119c3908301846114cf565b600060018201611a6757634e487b7160e01b600052601160045260246000fd5b5060010190565b60ff84168152606060208201526000611a8a60608301856114cf565b8281036040840152611a9c81856114cf565b9695505050505050565b600081518084526020808501945080840160005b83811015611adf5781516001600160401b031687529582019590820190600101611aba565b509495945050505050565b602080825282516001600160a01b03908116838301528382015160e060408501528051610100850181905260009392918301919084906101208701905b80831015611b4957845184168252938501936001929092019190850190611b27565b5060408801516001600160a01b0381166060890152945060608801516001600160a01b03811660808901529450608088015160a088015260a08801519450601f199350838782030160c0880152611ba08186611aa6565b945050505060c0850151818584030160e0860152611a9c83826114cf56fea26469706673582212203a963047f26911068b6c6a01d01999b433d617362fa33a26ca213e83a840498664736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_metadataURI": "Metadata URI of the Pool (title, description, etc.)",
          "_name": "Name of the Pool Strategy",
          "_schema": "Schema of the Pool (uint256 param, string anotherParam) - can be used for passing custom data"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1432,
        "contract": "contracts/Pool.sol:Pool",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1435,
        "contract": "contracts/Pool.sol:Pool",
        "label": "config",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(PoolConfig)1276_storage"
      },
      {
        "astId": 1437,
        "contract": "contracts/Pool.sol:Pool",
        "label": "schema",
        "offset": 0,
        "slot": "8",
        "type": "t_string_storage"
      },
      {
        "astId": 1442,
        "contract": "contracts/Pool.sol:Pool",
        "label": "registrations",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_struct(Registration)1290_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint64)dyn_storage": {
        "base": "t_uint64",
        "encoding": "dynamic_array",
        "label": "uint64[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_enum(Status)1280": {
        "encoding": "inplace",
        "label": "enum IPool.Status",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(Registration)1290_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IPool.Registration)",
        "numberOfBytes": "32",
        "value": "t_struct(Registration)1290_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(PoolConfig)1276_storage": {
        "encoding": "inplace",
        "label": "struct PoolConfig",
        "members": [
          {
            "astId": 1261,
            "contract": "contracts/Pool.sol:Pool",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1264,
            "contract": "contracts/Pool.sol:Pool",
            "label": "admins",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 1266,
            "contract": "contracts/Pool.sol:Pool",
            "label": "allocationToken",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 1268,
            "contract": "contracts/Pool.sol:Pool",
            "label": "distributionToken",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 1270,
            "contract": "contracts/Pool.sol:Pool",
            "label": "maxAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1273,
            "contract": "contracts/Pool.sol:Pool",
            "label": "timestamps",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_uint64)dyn_storage"
          },
          {
            "astId": 1275,
            "contract": "contracts/Pool.sol:Pool",
            "label": "metadataURI",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(Registration)1290_storage": {
        "encoding": "inplace",
        "label": "struct IPool.Registration",
        "members": [
          {
            "astId": 1283,
            "contract": "contracts/Pool.sol:Pool",
            "label": "status",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(Status)1280"
          },
          {
            "astId": 1285,
            "contract": "contracts/Pool.sol:Pool",
            "label": "owner",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1287,
            "contract": "contracts/Pool.sol:Pool",
            "label": "metadataURI",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 1289,
            "contract": "contracts/Pool.sol:Pool",
            "label": "data",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}